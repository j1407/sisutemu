var math;
var count;
var answer;
var game;
var reset;
var click_id = "";
function init(){
    math = 10;
    count = 0;
    game = 3;
    reset = false;
    $('#numberpeople').css('background-color', 'transparent');
    $('#hint-block p').text('ゲーム番号');
    $('#open-block p').text('あけたかず');
    $('#answer-block p').text('正解のかず');
}
function make_table(height, width){
    var td;
    for(var i = 0;i < height;i++){
        $('#table').append('<tr>');
        for(var j = 0;j < width;j++){
            td = (i*width + j + 1);
            $('#table tr:last').append('<td id="td' + td + '"></td>');
            td -= 1;
            $('#table td').eq(td).css({background: "white"});
        }
        $('#table').append('</tr>');
    }
}
function make_roulette(height, width){
    var td, ans, num;
    var r_select = [];
    var r;
    if(game == 1){
        r = random_create(0,999,height*width).map(Number);
        r_select.push(r);
    }
    else if(game == 2){ // 配列は参照渡しと値渡しがある
        r = random_create(0,999,height*width).map(Number);
        r_select.push(r1 = r.sort(function(a,b){return (a < b ? -1 :  1);}).concat()); //昇順
        r_select.push(r2 = r.sort(function(a,b){return (a < b ?  1 : -1);}).concat()); //降順
        r_select.push(arraylineup(r1));
        r_select.push(arraylineup(r2));
    }
    else if(game == 3){
        var rs = [];
        var s, t, a = [];
        for(var i = 0;i < math*math;i++){
            rs.push(i % math);
        }
        var rt = rs.concat();
        rs = shuffle(rs); //1の位
        rt = shuffle(rt); //10の位
        for(var i = 0;i < math*math;i++){
            t = Math.floor(Math.random() * (math-1)); // 0〜9 //100の位
            a.push(t * 100 + rt[i] * 10 + rs[i]); //0〜999なので1を足す
            // rs[i]の値で色を決める。rt[i]がの大きさで色を決める
            r_select.push(a);
        }
    }
    num = Math.floor( Math.random() * r_select.length);
    if(game==1){
        ans = nonDuplicate(math*math)[0]; // 答えの数
        answer = r[ans];
    }
    else if(game==2 || game == 3){
        ans = nonDuplicate(math*math)[0]; // 答えの数
        answer = r_select[num][ans];
    }
    for(var i = 0;i < height;i++){
        for(var j = 0;j < width;j++){
            td = (i*width + j + 1);
            $('#table tr').eq(i).children('td').eq(j).text(r_select[num][i*width + j]);
        }
    }
}
// 配列の値をシャッフル
function shuffle(array){
    for(var i = array.length - 1; i > 0; i--){
        var r = Math.floor(Math.random() * (i + 1));
        var tmp = array[i];
        array[i] = array[r];
        array[r] = tmp;
    }
    return array;
}
// 引数の配列を横だけでなく、縦に並びかえる
function arraylineup(r){
    t = [];
    for(var i = 0;i < math;i++){
        for(var j = 0;j < math;j++){
            t.push(r[j*10+i]);
        }
    }
    return t;
}
function restart(height, width){
    var td, td_p;
    var t = $('#table td');
    for(var i = 0;i < height;i++){
        for(var j = 0;j < width;j++){
            td = (i*width + j + 1);
            $('#table tr').eq(i).children('td').eq(j).text("");
            td_p = i * math + j;
            t.eq(td_p).css({color: "black"});
            t.eq(td_p).css({background: "white"});
        }
    }
}

/*---- 重複のない乱数生成   ---*/
function random_create(min, max, fig){
    var randoms = [];
    var tmp;
    for(i = 0; i < fig; i++){
        while(true){
            tmp = intRandom(min, max);
            if(!randoms.includes(tmp)){
                randoms.push(tmp);
                break;
            }
        }
    }
    return randoms;
}
/** min以上max以下の整数値の乱数を返す */
function intRandom(min, max){
    return Math.floor( Math.random() * (max - min + 1)) + min;
}
// -----------------------------------------------------------------------------------------------
// 重複なしの0〜a-1までの数をシャッフルして配列で返す
function nonDuplicate(n){
    var s = [];
    var b = [];
    var j, t;
    var fig = n;
    for(var i = 0;i < n; i++){
        s.push(i);
    }
    while (fig) {
        j = Math.floor( Math.random() * fig );
        b.push(s[j]);
        s.splice(j, 1);
        fig--;
    }
    return b;
}

function make_color(){
    var td = $('#table td'), td_p, s;
    var p = [];
    var num = nonDuplicate(math*math);
    if(game == 1 || game == 2){
        for(var i = 0;i < math;i++){
            for(var j = 0;j < math;j++){
                p.push([i, j]); 
            }
        }
        for(var i = 0;i < math;i++){
            for(var j = 0;j < math;j++){
                td_p = i * math + j;
                td.eq(td_p).css({background: color[p[num[td_p]][0]][p[num[td_p]][1]]});
                //td.eq(td_p).css({color: color[p[num[td_p]][0]][p[num[td_p]][1]]});
            }
        }
    }
    else if(game == 3){
        var p1 = [[0,1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1,0]]; // 10の位の数の明るさ
        var p2 = random_create(0, math - 1, math); //  1の位の数の色
        var s1 = [], s2 = [];
        var k = Math.floor( Math.random() * 2);
        for(var i = 0;i < math*math;i++){
            var a = parseInt($('#td'+(i+1)).text());
            s2.push(a % 10); //1の位
            s1.push((a % 100 - a % 10) / 10); //10の位
        }
        for(var i = 0;i < math*math;i++){
            td.eq(i).css({background: color[p2[s2[i]]][p1[k][s1[i]]]});
            //td.eq(i).css({color: color[p2[s2[i]]][p1[k][s1[i]]]});
        }
    }
}
function game_start(){
    make_roulette(math, math); // 数字の配置
    if(game == 1 || game == 2 || game == 3){ // game==3は別のところで生成する
        make_color();              // ランダムに色を生成して配置
    }
    //var input = $('#my-form [name=n-people]').val();
    var input = document.getElementById("numberpeople").innerHTML;
    $('#numberpeople').css('background-color', '#666');
    $('#hint-block p').text("ゲーム"+game);
    $('#open-block p').text(count);
    $('#answer-block p').text(answer);
}

// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
window.onload = function(){
    init();
    make_table(math, math);
}
function getID(element){
    click_id = element.id;
}
function getIDout(element){
    click_id = "";
}
$(function(){
    $(document.body).keydown(function (e) {
        if(click_id == "numberpeople" && (!reset)){
            if(e.keyCode >= 48 && e.keyCode <= 52){
                document.getElementById("numberpeople").innerHTML = e.keyCode - 48;
            }
        }
    });
    $("#start-button").click(function(e){
        if(!reset){
            reset = true;
            $('#start-button').text("ゲームをやめる");
            game_start();
        }
        else{
            $('#start-button').text("ゲームをはじめる");
            init();
            restart(math, math);
        }
    });
    $("#table td").on('click',?function()?{
        if(reset){
            tag_td = $(this).attr("id");
            $('#'+tag_td).css('color','black');
            count++;
            $('#open-block p').text(count);
            if($('#'+tag_td).text() == answer){
                alert("当たり");
                game += 1;
                if(game == 4){
                    alert("ゲームクリア");
                    $('#start-button').text("ゲームをはじめる");
                    init();
                    restart(math, math);
                }
                else{
                    game_start();
                }
            }
        }
    });
});